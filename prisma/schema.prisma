// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password   String?
  name        String
  sentMessages Messages[] @relation("SentMessages")  
  receivedMessages Messages[] @relation("ReceivedMessages") 
  createdAt DateTime @default(now())
  profileUrl String?
  sentChats      Chat[]  @relation("user1")
  receivedChats   Chat[]  @relation("user2")
  deletedMessage DeletedMessage[]
  deletedChat DeletedChat[] 
  groupMemberships GroupMember[]   
  groupMessages    GroupMessage[]  
  deletedGroup DeletedGroup[]
  refreshToken String? @unique
  tokenExpiresIn DateTime?
  publickey String?
}
model Messages {
  id          String   @id @default(uuid())
  senderContent String?
  receiverContent String?
  content     String
  createdAt   DateTime @default(now())
  senderId    String
  receiverId  String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])  
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])  
  chatId      String
  chat      Chat     @relation(fields: [chatId], references: [id])
  deletedBy DeletedMessage[]
  isMedia Boolean @default(false)
}  

model Chat {
  id          String   @id @default(uuid())
  senderId String
  receiverId String
  lastMessageForSender String
  lastMessageForReceiver String
  lastMessageCreatedAt  DateTime @default(now())
  unreadCount Json? 
  user1 User @relation(name: "user1", fields: [senderId], references: [id])
  user2 User @relation(name: "user2", fields: [receiverId], references: [id])
  message Messages[]
  deleteBy DeletedChat[]
}


model DeletedChat {
  id String @id @default(uuid())
  userId String
  chatId String
  user User @relation(fields: [userId],references: [id])
  chat Chat @relation(fields: [chatId],references: [id])
}



model DeletedMessage {
  id        String   @id @default(uuid())
  userId    String
  messageId String

  user      User     @relation(fields: [userId], references: [id])
  message   Messages  @relation(fields: [messageId], references: [id])

  @@unique([userId, messageId])
}









model Group {
  id        String   @id @default(uuid())
  name      String
  members   GroupMember[]  
  messages  GroupMessage[]
  createdAt DateTime @default(now())
  deletedby  DeletedGroup[]
}

model DeletedGroup {
  id String @id @default(uuid())
  userId String
  groupId String
  user User @relation(fields: [userId],references: [id])
  group Group @relation(fields: [groupId],references: [id])
}

model GroupMember {
  id       String  @id @default(uuid())
  group    Group   @relation(fields: [groupId], references: [id])
  groupId  String
  user     User    @relation(fields: [userId], references: [id])
  userId   String
  joinedAt DateTime @default(now())
}

model GroupMessage {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String
  createdAt DateTime @default(now())
}